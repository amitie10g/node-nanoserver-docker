name: Docker Image CI

on:
  workflow_dispatch:
  schedule: 
   - cron: '0 12 * * 0'

env:
  BASE_URL: "https://nodejs.org/dist"
  VERSION_PATTERN: "node-v(\\d+\\.\\d+\\.\\d+)"
  FIRST_VERSION: 4
  LATEST_VERSION: 22
  NODE_VERSIONS_ELEMENTS: >-
    argon
    boron
    carbon
    dubnium
    erbium
    fermium
    gallium
    hydrogen
    iron

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
    - name: parse
      id: set-matrix
      run: |
        version1=($(seq ${{ env.FIRST_VERSION }} ${{ env.LATEST_VERSION }}))
        mapfile -t version1 < <(printf '%s\n' "${version1[@]}" | tac)
        read -a version2 <<< "${{ env.NODE_VERSIONS_ELEMENTS }}"
        versions=("${version1[@]}" "${version2[@]}")
        echo "versions=$(printf '%s\n' "${versions[@]}" | jq -R . | jq -s -c .)" >> $GITHUB_OUTPUT
    outputs:
      versions: ${{ steps.set-matrix.outputs.versions }}

  build:
    needs: prepare
    runs-on: windows-${{ matrix.windows_version }}
    strategy:
      matrix:
        node_version: ${{fromJson(needs.prepare.outputs.versions)}}
        windows_version: ["2022", "2019"]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version
      id: get_minor_version
      run: |
        $node_version = "${{ matrix.node_version }}" -match "^\d+$" ? "v${{ matrix.node_version }}.x" : "${{ matrix.node_version }}"
        $htmlContent = Invoke-WebRequest -Uri "${{ env.BASE_URL }}/latest-$node_version"
        foreach ($link in $htmlContent.Links.href) {
          if ($link -match "${{ env.VERSION_PATTERN }}") {
            $MINOR_VERSION=$Matches[1]
            echo "minor_version=$MINOR_VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            exit 0
          }
        }
        exit 1

    - name: Set tags
      uses: docker/metadata-action@v5
      id: meta
      with:
        images: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}
          ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}
        tags: |
          ${{ matrix.node_version }}-ltsc${{ matrix.windows_version }}
          ${{ steps.get_minor_version.outputs.minor_version }}-ltsc${{ matrix.windows_version }}
          ${{ strategy.job-index % 2 && matrix.node_version || ''}}
          ${{ matrix.windows_version == 2022 && steps.get_minor_version.outputs.minor_version || ''}}
          ${{ strategy.job-index == 0 && 'latest' || ''}}

    - name: Build
      run: |
        $json = '${{ steps.meta.outputs.json }}' | ConvertFrom-Json
        $tags = $json.tags
        $tagList = $tags | ForEach-Object { "-t $_" }
        $tagString = $tagList -join ' '
        cmd /c "docker build $tagString --build-arg CONT_VER=ltsc${{ matrix.windows_version }} --build-arg NODE_VER=${{ matrix.node_version }} ."
         
    - name: Push
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }} --all-tags
        docker push ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }} --all-tags
