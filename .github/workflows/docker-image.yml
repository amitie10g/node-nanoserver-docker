name: Docker Image CI

on:
  workflow_dispatch:
  schedule: 
   - cron: '0 12 * 1/3 0'

env:
  BASE_URL: "https://nodejs.org/dist"
  VERSION_PATTERN: "node-v(\\d+\\.\\d+\\.\\d+)"
  FIRST_VERSION: 6
  LATEST_VERSION: 23
  NODE_VERSIONS_ELEMENTS: >-
    argon
    boron
    carbon
    dubnium
    erbium
    fermium
    gallium
    hydrogen
    iron
    jod

jobs:
  Download:
    runs-on: ubuntu-latest
    steps:
    - name: Download
      run: |
        for version in $(seq ${{ env.FIRST_VERSION }} ${{ env.LATEST_VERSION }}); do
          base_url=$(curl -Ls -o /dev/null -w %{url_effective} "${{ env.BASE_URL }}/latest-v${version}.x")
          minor_version=$(basename "${base_url}")
          curl -O ${base_url}node-${minor_version}-win-x64.zip
          unzip node-${minor_version}-win-x64.zip
          mv node-${minor_version}-win-x64/ node-${minor_version}
        done

    - name: Upload to Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NodeJS
        retention-days: 1
        path: |
          node*
          !*-win-x64
          !*.zip

  Build:
    needs: Download
    strategy:
      fail-fast: false
      matrix:
        winver:
          - ltsc2025
          - ltsc2022
          - ltsc2019
          - 20H2
          - 2009
          - 2004
          - 1909
          - 1903
          - 1809
          - 1803
          - 1709
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v4

      - name: Build
        run: |
          $directories = Get-ChildItem -Path NodeJS -Directory
          $versions = @()
          $regex = [regex]"\d+\.\d+\.\d+"
          foreach ($dir in $directories) {
            if ($dir.Name -match $regex) {
              $versions += $matches[0]
            }
          }
          $versions | ForEach-Object -Parallel {
            $version = $_
            $major, $minor, $patch = $_ -split '\.'
            $TAGS = "-t ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:${major}-${{ matrix.winver }} -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:${version}-${{ matrix.winver }} -t ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}:${major}-${{ matrix.winver }} -t ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}:${version}-${{ matrix.winver }}"
            if (${{ strategy.job-index }} -eq 0) {
              $TAGS += " -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:${major} -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:${version} -t ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}:${major} -t ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}:${version}"
              if ($major -eq [System.Environment]::GetEnvironmentVariable("LATEST_VERSION")) {
                $TAGS += " -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}:latest -t ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}:latest"
              }
            }
            cmd /c "echo docker build --isolation=hyperv ${TAGS} --build-arg NODE_VER=${version} --build-arg CONT_VER=${{ matrix.winver }} ."
          }

      - name: Tag elements
        run: |
          echo [System.Environment]::GetEnvironmentVariable("BASE_URL")
          [System.Environment]::GetEnvironmentVariable("NODE_VERSIONS_ELEMENTS") -split ' ' | ForEach-Object -Parallel {
            param ($baseUrl)
            echo $_
          } -ArgumentList [System.Environment]::GetEnvironmentVariable("BASE_URL")

#      - name: Push
#        run: |
#          @("${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.IMAGE_NAME }}", "ghcr.io/${{ github.repository_owner }}/${{ vars.IMAGE_NAME }}") | ForEach-Object -Parallel {
#            cmd /c "docker push $_ --all-tags"
#          }
